{"ast":null,"code":"var _jsxFileName = \"/home/hp/Documentos/streams/client/src/components/streams/StreamCreate.js\";\nimport React from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      return React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.createStream(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (error && touched) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, error);\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"title\",\n      component: this.renderInput,\n      label: \"Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"description\",\n      component: this.renderInput,\n      label: \"Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  let errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a value\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a value\";\n  }\n\n  return errors;\n};\n\nconst wrapComponent = reduxForm({\n  form: 'streamCreate',\n  validate\n})(StreamCreate);\nexport default connect(null, {\n  createStream\n})(wrapComponent);","map":{"version":3,"sources":["/home/hp/Documentos/streams/client/src/components/streams/StreamCreate.js"],"names":["React","reduxForm","Field","connect","createStream","StreamCreate","Component","renderInput","input","label","meta","renderError","onSubmit","formValues","props","error","touched","render","handleSubmit","validate","errors","title","description","wrapComponent","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,YAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAYvCC,WAZuC,GAYzB,CAAC;AAAEC,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AACtC,aACA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQD,KAAR,CADJ,EAEI,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFJ,EAGK,KAAKG,WAAL,CAAiBD,IAAjB,CAHL,CADA;AAOH,KApBsC;;AAAA,SAsBvCE,QAtBuC,GAsB3BC,UAAD,IAAgB;AACvB,WAAKC,KAAL,CAAWV,YAAX,CAAwBS,UAAxB;AACH,KAxBsC;AAAA;;AAEvCF,EAAAA,WAAW,CAAC;AAAEI,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC5B,QAAGD,KAAK,IAAIC,OAAZ,EAAqB;AACjB,aACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKD,KADL,CADJ;AAKH;AACJ;;AAgBDE,EAAAA,MAAM,GAAG;AACL,WACA;AAAM,MAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,YAAX,CAAwB,KAAKN,QAA7B,CAAhB;AAAwD,MAAA,SAAS,EAAC,eAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,SAAS,EAAE,KAAKL,WAApC;AAAiD,MAAA,KAAK,EAAC,OAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,aAAZ;AAA0B,MAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,MAAA,KAAK,EAAC,aAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI;AAAQ,MAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,CADA;AAOH;;AAlCsC;;AAqC3C,MAAMY,QAAQ,GAAIN,UAAD,IAAgB;AAC7B,MAAIO,MAAM,GAAG,EAAb;;AAEA,MAAG,CAACP,UAAU,CAACQ,KAAf,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AAED,MAAG,CAACR,UAAU,CAACS,WAAf,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,wBAArB;AACH;;AAED,SAAOF,MAAP;AACH,CAZD;;AAcA,MAAMG,aAAa,GAAGtB,SAAS,CAAC;AAC5BuB,EAAAA,IAAI,EAAE,cADsB;AAE5BL,EAAAA;AAF4B,CAAD,CAAT,CAGnBd,YAHmB,CAAtB;AAKA,eAAeF,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA;AAAF,CAAP,CAAP,CAAgCmB,aAAhC,CAAf","sourcesContent":["import React from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { createStream } from '../../actions';\n\nclass StreamCreate extends React.Component {\n   \n    renderError({ error, touched }) {\n        if(error && touched) {\n            return (\n                <div className=\"ui error message\">\n                    {error}\n                </div>\n            )\n        }\n    }\n\n    renderInput = ({ input, label, meta }) => {\n        return (\n        <div className=\"field\">\n            <label>{label}</label>\n            <input {...input} autoComplete=\"off\" />\n            {this.renderError(meta)}\n        </div>\n        )\n    }\n\n    onSubmit = (formValues) => {\n        this.props.createStream(formValues);\n    }\n\n    render() {\n        return (\n        <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n            <Field name=\"title\" component={this.renderInput} label=\"Title\"/>\n            <Field name=\"description\" component={this.renderInput} label=\"Description\"/>\n            <button className=\"ui button primary\">Submit</button>\n        </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    let errors = {};\n\n    if(!formValues.title) {\n        errors.title = \"You must enter a value\";\n    }\n    \n    if(!formValues.description) {\n        errors.description = \"You must enter a value\";\n    }\n\n    return errors;\n}\n\nconst wrapComponent = reduxForm({\n    form: 'streamCreate',\n    validate\n})(StreamCreate);\n\nexport default connect(null, { createStream })(wrapComponent);"]},"metadata":{},"sourceType":"module"}